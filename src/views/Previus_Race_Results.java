package views;

import java.awt.event.ItemEvent;
import java.sql.ResultSet;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import models.Conection;

/**
 * @author Mauro
 */
public class Previus_Race_Results extends javax.swing.JFrame {

    Conection c;
    DefaultComboBoxModel combo;
    DefaultComboBoxModel comboGender;
    DefaultTableModel tablemodel;
    String[] idsMarathon;
    String[] idsRaceEvent;
    String[] ageCategories;
    
    int idMarathon;
    String idRaceEvent;
    String ageCategory;
    
    public Previus_Race_Results() {
        initComponents();
        
        combo = new DefaultComboBoxModel();
        comboGender = new DefaultComboBoxModel();
        tablemodel = new DefaultTableModel();
        
        tablemodel.addColumn("Rank");
        tablemodel.addColumn("Race Time");
        tablemodel.addColumn("Runner Name");
        tablemodel.addColumn("Country");
        
        jt_results.setModel(tablemodel);
        
        c = new Conection();
        c.conect();
        
        combo.addElement("Select Marathon");
        
        int numberMarathons = c.getCountMarathons();
        idsMarathon = new String[numberMarathons];
        ResultSet dataMarathon = c.getMarathons();
        int countMarathons = 0;
        
        try {
            while(dataMarathon.next()){
                idsMarathon[countMarathons] = dataMarathon.getString("MarathonId");
                combo.addElement(dataMarathon.getString("YearHeld")+" - "+dataMarathon.getString("CityName"));
                countMarathons++;
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
        
        jcb_marathon.setModel(combo);
        
        comboGender.addElement("Any");
        ResultSet dataGender = c.getGenders();
        
        try {
            while(dataGender.next()){
                comboGender.addElement(dataGender.getString("Gender"));
            }
        } catch (Exception e) {}
        
        jcb_gender.setModel(comboGender);
        
        ageCategories = new String[]{
            "0,17",
            "18,29",
            "30,39",
            "40,55",
            "56,70",
            "71,120",
        };
        
        int[] anchos = {50, 90, 150, 60};
        setColumnWidths(anchos, jt_results);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jcb_marathon = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jcb_raceEvent = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jcb_gender = new javax.swing.JComboBox();
        jcb_ageCategory = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jt_results = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Marathons Skills 2016");
        setResizable(false);

        jPanel4.setBackground(new java.awt.Color(153, 153, 153));

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("MARATHON SKILLS 2016");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(146, 146, 146)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addContainerGap())
        );

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(130, 130, 130));
        jLabel4.setText("Previus Race Results");

        jLabel5.setText("Marathon");

        jcb_marathon.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcb_marathon.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcb_marathonItemStateChanged(evt);
            }
        });

        jLabel6.setText("Race Event");

        jcb_raceEvent.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Race Event" }));
        jcb_raceEvent.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcb_raceEventItemStateChanged(evt);
            }
        });

        jLabel7.setText("Gender");

        jLabel8.setText("Age Category");

        jcb_gender.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jcb_ageCategory.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Category", "Minor to 18 years", "18 - 29", "30 - 39", "40 - 55", "56 - 70", "More than 70 years" }));
        jcb_ageCategory.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcb_ageCategoryItemStateChanged(evt);
            }
        });

        jt_results.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jt_results);

        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(205, 205, 205)
                            .addComponent(jLabel4))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(29, 29, 29)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel6)
                                .addComponent(jLabel5))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jcb_marathon, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jcb_raceEvent, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(27, 27, 27)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel7)
                                .addComponent(jLabel8))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jcb_gender, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(0, 0, Short.MAX_VALUE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jcb_ageCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                                    .addComponent(jButton1))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jcb_marathon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jcb_gender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jcb_raceEvent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(jcb_ageCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 10, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jcb_marathonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcb_marathonItemStateChanged
        // TODO add your handling code here:
        if(evt.getStateChange() == ItemEvent.SELECTED){
            DefaultComboBoxModel modelRace = new DefaultComboBoxModel();
            
            if(jcb_marathon.getSelectedIndex() != 0){
                idMarathon = Integer.parseInt(idsMarathon[jcb_marathon.getSelectedIndex() - 1]);
                
                idsRaceEvent = new String[c.getCountRaceEvents(idMarathon)];
                ResultSet dataEvent = c.getRaceEvents(idMarathon);
                
                int countRaces = 0;
                
                jcb_raceEvent.removeAllItems();
                modelRace.addElement("Select Race Event");
                
                try {
                    while(dataEvent.next()){
                        idsRaceEvent[countRaces] = dataEvent.getString("EventId");
                        modelRace.addElement(dataEvent.getString("EventName"));
                        countRaces++;
                    }
                } catch (Exception e) {
                }
            }else{
                jcb_raceEvent.removeAllItems();
                modelRace.addElement("Select Race Event");
            }
            
            jcb_raceEvent.setModel(modelRace);
        }
    }//GEN-LAST:event_jcb_marathonItemStateChanged

    private void jcb_raceEventItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcb_raceEventItemStateChanged
        // TODO add your handling code here:
        if(evt.getStateChange() == ItemEvent.SELECTED){
            if(jcb_raceEvent.getSelectedIndex() != 0){
                idRaceEvent = idsRaceEvent[jcb_raceEvent.getSelectedIndex() - 1];
            }
        }
    }//GEN-LAST:event_jcb_raceEventItemStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if(jcb_marathon.getSelectedIndex() == 0){
            message("Select first one marathon");
            jcb_marathon.requestFocus();
        }else if(jcb_raceEvent.getSelectedIndex() == 0){
            message("Select first one race event");
            jcb_raceEvent.requestFocus();
        }else if(jcb_ageCategory.getSelectedIndex() == 0){
            message("Select first one age category");
            jcb_ageCategory.requestFocus();
        }else{
            ResultSet dataRunners = c.getPreviusResultRaceRunner(idMarathon, idRaceEvent, jcb_gender.getSelectedItem().toString(), ageCategory);
            
            // remove all rows to load new query
            DefaultTableModel modelo = (DefaultTableModel) jt_results.getModel();
            int a = jt_results.getRowCount() - 1;
            for (int i = a; i >= 0; i--) {
                modelo.removeRow(i);
            }
            
            try {
                int rank = 1;
                while(dataRunners.next()){
                    Object[] row = new Object[4];
                    row[0] = rank;
                    row[1] = formatRaceTime(dataRunners.getString("RaceTime"));
                    row[2] = dataRunners.getString("FirstName")+" "+dataRunners.getString("LastName");
                    row[3] = dataRunners.getString("CountryCode");
                    System.out.println(":=");
                    rank++;
                    tablemodel.addRow(row);
                }
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
            
            jt_results.setModel(tablemodel);
            
            if(jt_results.getRowCount() <= 0){
                message("No found registers!");
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jcb_ageCategoryItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcb_ageCategoryItemStateChanged
        // TODO add your handling code here:
        if(evt.getStateChange() == ItemEvent.SELECTED){
            if(jcb_ageCategory.getSelectedIndex() != 0){
                ageCategory = ageCategories[jcb_ageCategory.getSelectedIndex() - 1];
            }
        }
    }//GEN-LAST:event_jcb_ageCategoryItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Previus_Race_Results.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Previus_Race_Results.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Previus_Race_Results.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Previus_Race_Results.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Previus_Race_Results().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_back;
    private javax.swing.JButton btn_back1;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox jcb_ageCategory;
    private javax.swing.JComboBox jcb_gender;
    private javax.swing.JComboBox jcb_marathon;
    private javax.swing.JComboBox jcb_raceEvent;
    private javax.swing.JTable jt_results;
    // End of variables declaration//GEN-END:variables

    private void message(String message) {
        JOptionPane.showMessageDialog(this, message, "Marathons Skills 2016", JOptionPane.WARNING_MESSAGE);
    }
    
    public String formatRaceTime(String raceTime){ 
        // validate if the time is not null
        if(raceTime == null || raceTime == "NULL"){
            return "0";
        }
        
        int time = Integer.parseInt(raceTime);
        
        int hours = time / 3600;
        int minutes = (time - (hours * 3600)) / (60);
        int seconds = (time) - ((hours * 3600) + (minutes * 60));
        
        return hours+"H "+minutes+"M "+seconds+"S" ;
    }
    
    private void setColumnWidths(int[] widths, JTable table) {
        int nrCols = table.getModel().getColumnCount();
        if (nrCols == 0 || widths == null) {
            return;
        }

        //current width of the table:
        int totalWidth = table.getWidth();

        int totalWidthRequested = 0;
        int nrRequestedWidths = widths.length;
        int defaultWidth = (int) Math.floor((double) totalWidth / (double) nrCols);

        for (int col = 0; col < nrCols; col++) {
            int width = 0;
            if (widths.length > col) {
                width = widths[col];
            }
            totalWidthRequested += width;
        }
        //Note: for the not defined columns: use the defaultWidth
        if (nrRequestedWidths < nrCols) {
            totalWidthRequested += ((nrCols - nrRequestedWidths) * defaultWidth);
        }
        //calculate the scale for the column width
        double factor = (double) totalWidth / (double) totalWidthRequested;

        for (int col = 0; col < nrCols; col++) {
            int width = defaultWidth;
            if (widths.length > col) {
                //scale the requested width to the current table width
                width = (int) Math.floor(factor * (double) widths[col]);
            }
            table.getColumnModel().getColumn(col).setPreferredWidth(width);
            table.getColumnModel().getColumn(col).setWidth(width);
        }
    }
}
